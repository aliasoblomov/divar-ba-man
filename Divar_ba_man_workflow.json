{
  "name": "Divar_Me",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutesInterval": 30
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        120,
        380
      ],
      "id": "84dfa5bf-e9cc-4c5f-addd-a03f4c56a049",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "url": "=https://divar.ir/s/tehran/rent-apartment/ararat?bbox=51.2901192%2C35.6988182%2C51.445282%2C35.8109589&building-age=-15&credit=-1500000000&districts=925%2C167%2C91%2C57%2C927%2C297%2C922%2C933%2C929%2C81%2C926%2C75%2C202%2C138%2C78%2C1035%2C300%2C210%2C299%2C923%2C88%2C139%2C315%2C90%2C96%2C934&floor=1-1000&map_bbox=51.29011917114258%2C35.69881820678711%2C51.445281982421875%2C35.81095886230469&map_place_hash=1%7C1035%2C138%2C139%2C167%2C202%2C210%2C297%2C299%2C300%2C315%2C57%2C75%2C78%2C81%2C87%2C88%2C90%2C91%2C922%2C923%2C925%2C926%2C927%2C929%2C933%7Capartment-rent&parking=true&recent_ads=3h&rent=-40000000&rooms=%DB%8C%DA%A9%2C%D8%AF%D9%88&size=65-",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": " User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "text"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        480,
        380
      ],
      "id": "710539aa-ee0d-4982-841f-346e36abd331",
      "name": "Fetch Divar Data",
      "alwaysOutputData": false,
      "retryOnFail": true,
      "waitBetweenTries": 5000
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        700,
        380
      ],
      "id": "f7406dba-e77a-4ac8-9d3e-ba75d16dff17",
      "name": "Aggregate Pages"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "e0e85958-fd05-4fe8-b984-eb6f92261249",
              "leftValue": "={{ $json.modified_date }}",
              "rightValue": "={{ Date.now() - 3600000 * 0.5}}",
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1360,
        700
      ],
      "id": "54079562-b4f1-41c3-993a-332047e440f4",
      "name": "Filter Recent Posts"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "3f00cbb4-2c1f-4c28-93ce-2691f998a6ee",
              "name": "Title",
              "value": "={{ $json['تایتل'] }}",
              "type": "string"
            },
            {
              "id": "f002beb8-2644-4ec1-8062-a486d94ebecf",
              "name": "Rahn",
              "value": "={{ $json['ودیعه'] }}",
              "type": "string"
            },
            {
              "id": "1f435d2a-50ef-40b0-a946-ec5e030661ad",
              "name": "Ejareh",
              "value": "={{ $json['اجاره'] }}",
              "type": "string"
            },
            {
              "id": "83de52f7-3b4d-421d-a0a1-3a8f46c35f42",
              "name": "Link",
              "value": "={{ $json['لینک'] }}",
              "type": "string"
            },
            {
              "id": "4b1d4051-aeaa-41c9-9b41-7c4052213ce6",
              "name": "Published_at",
              "value": "={{ $json['تاریخ تهران'] }}",
              "type": "string"
            },
            {
              "id": "ebbd8153-082e-4b14-af75-3ed8a80f7b7c",
              "name": "Note",
              "value": "={{ $json['منتشر شده در'] }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1720,
        680
      ],
      "id": "26f785e7-5862-43f8-900f-8773df5f2ebc",
      "name": "Format Extracted Fields"
    },
    {
      "parameters": {
        "jsCode": "// This function remains the same as it's still useful for formatting the date.\nfunction divarSortDateToTehranPretty(sort_date) {\n    if (!sort_date || sort_date === 'Not Found') return '';\n    const date = new Date(sort_date);\n    return date.toLocaleString('fa-IR', {\n        timeZone: 'Asia/Tehran',\n        hour: '2-digit',\n        minute: '2-digit',\n        day: 'numeric',\n        month: 'long',\n        hour12: false\n    }).replace('،', '\\n -');\n}\n\nconst results = [];\nconst htmlPages = $json.data; // This is an array of {data: \"<html>...</html>\"}\n\nfor (const htmlObj of htmlPages) {\n    const html = htmlObj.data;\n\n    const scriptTagRegex = /window\\.__PRELOADED_STATE__\\s*=\\s*(\\{[\\s\\S]*?\\})\\s*;/;\n    const match = html.match(scriptTagRegex);\n\n    if (!match || !match[1]) {\n        console.error(\"Could not find __PRELOADED_STATE__ in the HTML.\");\n        continue;\n    }\n\n    let preloadedState;\n    try {\n        preloadedState = JSON.parse(match[1]);\n    } catch (e) {\n        console.error(\"Failed to parse __PRELOADED_STATE__ JSON.\", e);\n        continue;\n    }\n\n    const widgets = preloadedState?.nb?.listWidgets;\n    if (!Array.isArray(widgets)) {\n        console.error(\"listWidgets array not found in the expected location.\");\n        continue;\n    }\n\n    for (const widget of widgets) {\n        if (widget.type !== 'WIDGET' || widget.data.widgetType !== 'POST_ROW') {\n            continue;\n        }\n\n        const postData = widget.data;\n        const postLinkPath = postData.action?.props?.to?.pathname || '';\n        \n        // Get the date string from Divar\n        const sortDateString = postData.actionLog?.server_side_info?.info?.sort_date || null;\n        \n        // Convert the date string to an epoch timestamp number\n        const epochTimestamp = sortDateString ? new Date(sortDateString).getTime() : null;\n\n        results.push({\n            \"تایتل\": postData.title || 'بدون عنوان',\n            \"ودیعه\": postData.topDescription || 'توافقی',\n            \"اجاره\": postData.middleDescription || 'رهن کامل',\n            \"منتشر شده در\": postData.bottomDescription || '',\n            \"modified_date\": epochTimestamp, // Now a number, e.g., 1752414978020\n            \"تاریخ تهران\": divarSortDateToTehranPretty(sortDateString), // This still gets formatted correctly\n            \"لینک\": `https://divar.ir${postLinkPath}`\n        });\n    }\n}\n\n// Return the data in the format n8n expects\nreturn results.map(r => ({\n    json: r\n}));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1060,
        620
      ],
      "id": "5698cbb0-913e-4ac2-a270-9633e2215746",
      "name": "Extract Post Fields",
      "retryOnFail": true,
      "maxTries": 5,
      "executeOnce": false,
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "bba30d49-b857-43d5-8f28-80f4dfbb86ca",
              "name": "Format Telegram Message",
              "value": "=📣 <b> یه کیس جدید رو دیوار !</b>\n\n🏠 <b>عنوان:</b> {{ $json.Title }}\n\n💰 <b>ودیعه:</b> {{ $json.Rahn }}\n💰 <b>اجاره:</b> {{ $json.Ejareh }}\n\n🔢 <b>معادل رهن :</b> {{ $json.Rahn_Total_Words }} تومان\n\n📅 <i>{{ $json.Published_at }}</i>\n🗒️ <i>{{ $json.Note }}</i>\n\n👀 زود باش ببینش:\n<a href=\"{{ $json.Link }}\">کلیک کن!</a>",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2480,
        600
      ],
      "id": "5a82ee78-7f38-42dc-8703-3f92c14d8e27",
      "name": "Format Telegram Message"
    },
    {
      "parameters": {
        "chatId": "-1002875433944",
        "text": "={{ $json['Format Telegram Message'] }}",
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        2600,
        220
      ],
      "id": "367fed7f-dbbd-407b-af7e-5e41b5b95d0a",
      "name": "Send Selected Posts",
      "webhookId": "425a3a3e-242a-4bc9-be41-3dab92ce70cd",
      "credentials": {
        "telegramApi": {
          "id": "i6kVsYi9qfhmRRuq",
          "name": "Divar Agent"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Function to convert Persian/Arabic digits to English digits\nfunction toEnglishDigits(str) {\n  if (!str) return '';\n  return str.replace(/[۰-۹]/g, d => '۰۱۲۳۴۵۶۷۸۹'.indexOf(d));\n}\n\n// Function to clean and parse currency strings\nfunction parseCurrency(str) {\n  if (typeof str !== 'string' || str.trim() === '') return 0;\n  const cleanedStr = toEnglishDigits(str).replace(/[^0-9]/g, '');\n  return parseInt(cleanedStr, 10) || 0;\n}\n\n// Function to convert numbers to Persian words\nfunction numberToPersianWords(num) {\n  if (num === 0) return 'صفر';\n  const parts = [];\n  const yekan = [\"\", \"یک\", \"دو\", \"سه\", \"چهار\", \"پنج\", \"شش\", \"هفت\", \"هشت\", \"نه\"];\n  const dahgan = [\"\", \"\", \"بیست\", \"سی\", \"چهل\", \"پنجاه\", \"شصت\", \"هفتاد\", \"هشتاد\", \"نود\"];\n  const sadgan = [\"\", \"یکصد\", \"دویست\", \"سیصد\", \"چهارصد\", \"پانصد\", \"ششصد\", \"هفتصد\", \"هشتصد\", \"نهصد\"];\n  const dah = [\"ده\", \"یازده\", \"دوازده\", \"سیزده\", \"چهارده\", \"پانزده\", \"شانزده\", \"هفده\", \"هجده\", \"نوزده\"];\n\n  function threeDigitToWords(n) {\n    let result = [];\n    const sad = Math.floor(n / 100);\n    const dahSad = n % 100;\n    const yek = n % 10;\n    \n    if (sad > 0) result.push(sadgan[sad]);\n    \n    if (dahSad >= 10 && dahSad < 20) {\n      result.push(dah[dahSad - 10]);\n    } else {\n      const dahVal = Math.floor(dahSad / 10);\n      if (dahVal > 0) result.push(dahgan[dahVal]);\n      if (yek > 0) result.push(yekan[yek]);\n    }\n    return result.join(' و ');\n  }\n\n  const scales = [\"\", \"هزار\", \"میلیون\", \"میلیارد\", \"تریلیون\"];\n  let scaleIndex = 0;\n  \n  while (num > 0) {\n    const chunk = num % 1000;\n    if (chunk > 0) {\n      parts.unshift(threeDigitToWords(chunk) + (scales[scaleIndex] ? ' ' + scales[scaleIndex] : ''));\n    }\n    num = Math.floor(num / 1000);\n    scaleIndex++;\n  }\n  \n  return parts.join(' و ');\n}\n\n// Array of Persian month names\nconst persianMonths = ['فروردین', 'اردیبهشت', 'خرداد', 'تیر', 'مرداد', 'شهریور', 'مهر', 'آبان', 'آذر', 'دی', 'بهمن', 'اسفند'];\nconst item = $json;\n\n// 1. Calculate Total Mortgage (Numerical)\nconst rahnValue = parseCurrency(item.Rahn);\nconst ejarehValue = (item.Ejareh.includes('رهن کامل')) ? 0 : parseCurrency(item.Ejareh);\nconst totalRahn = rahnValue + (ejarehValue / 3000000) * 100000000;\nitem.Rahn_Total = totalRahn;\n\n// --- THIS IS THE MODIFIED LINE ---\n// 2. Round down the total mortgage to the nearest million and convert to words\nconst roundedRahn = Math.floor(totalRahn / 1000000) * 1000000;\nitem.Rahn_Total_Words = numberToPersianWords(roundedRahn);\n// --- END OF MODIFICATION ---\n\n// 3. Format the Published_at Date\nconst originalDate = item.Published_at;\ntry {\n  const [datePart, timePart] = originalDate.split(', ');\n  const dateSegments = datePart.split('/');\n  const monthIndex = parseInt(toEnglishDigits(dateSegments[1])) - 1;\n  const monthName = persianMonths[monthIndex];\n  const day = dateSegments[2];\n  const hourAndMinute = timePart.substring(0, 5);\n  item.Published_at = `${day} ${monthName}\\n ${hourAndMinute}`;\n} catch (e) {\n  // Keep original date if formatting fails\n}\n\nreturn item;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1940,
        680
      ],
      "id": "efc58add-d13c-4677-9995-dea74c94947d",
      "name": "Code"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "6521b815-3443-4f09-ac8c-224a4b3179b3",
              "leftValue": "={{ $json[\"تایتل\"] }}",
              "rightValue": "روزانه|همخانه|همخونه|هم‌خانه|هم‌خانه‌ای|هم‌خونه|هم‌خونه‌ای|پانسیون|اشتراکی|خوابگاه|مراقبت|هم خانه ای|هم خانه‌ای|هم خونه ای|هم خونه‌ای|خونه ندارم|خانه ندارم|مشترک|مشترکی|اشتراک|همخوانه|هفتگی|ماهانه|هم خانه|هم خونه|خابگاه|زوج",
              "operator": {
                "type": "string",
                "operation": "notRegex"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1480,
        540
      ],
      "id": "d11183e1-ec28-4c6a-b4c1-a384da6b6b2a",
      "name": "Filter Irrelevant Posts"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "23688b0d-0453-41aa-80af-8c9fc48f904d",
              "leftValue": "={{ $json.Rahn_Total }}",
              "rightValue": 1600000000,
              "operator": {
                "type": "number",
                "operation": "lte"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2160,
        680
      ],
      "id": "e52fc456-f6d6-4b57-b302-42bdb0764225",
      "name": "Budget Filter"
    }
  ],
  "pinData": {},
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Fetch Divar Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Divar Data": {
      "main": [
        [
          {
            "node": "Aggregate Pages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate Pages": {
      "main": [
        [
          {
            "node": "Extract Post Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Recent Posts": {
      "main": [
        [
          {
            "node": "Filter Irrelevant Posts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Extracted Fields": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Post Fields": {
      "main": [
        [
          {
            "node": "Filter Recent Posts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Telegram Message": {
      "main": [
        [
          {
            "node": "Send Selected Posts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Budget Filter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Irrelevant Posts": {
      "main": [
        [
          {
            "node": "Format Extracted Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Budget Filter": {
      "main": [
        [
          {
            "node": "Format Telegram Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "840ac91d-c684-4c7a-ba0f-3982dd063767",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "e7c5f3b2d268aa385ccb63aca8e2dda38d49968e610e1db92922feef4a50bea2"
  },
  "id": "PSalL9XJXuxBjtyM",
  "tags": []
}