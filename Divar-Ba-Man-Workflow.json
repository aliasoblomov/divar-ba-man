{
  "name": "Divar_Scrape",
  "nodes": [
    {
      "parameters": {
        "chatId": "-1002875433944",
        "text": "={{ $json['Format Telegram Message'] }}",
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        4880,
        -280
      ],
      "id": "1fe61149-5267-4502-95fc-e119c2baafaa",
      "name": "Send a text message",
      "webhookId": "425a3a3e-242a-4bc9-be41-3dab92ce70cd",
      "credentials": {
        "telegramApi": {
          "id": "Qn46n4PRNcW4B9vD",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "bba30d49-b857-43d5-8f28-80f4dfbb86ca",
              "name": "Format Telegram Message",
              "value": "=📣 <b>شکار لحظه‌ها! یه خونه جدید رو دیوار پیدا شد!</b>\n\n🏠 <b>عنوان:</b> {{ $json.Title }}\n\n💰 <b>{{ $json.Rahn }}</b>\n💰 <b>{{ $json.Ejareh }}</b>\n\n📅 <i>{{ $json.Published_at }}</i>\n\n🗒️ <i>{{ $json.Note }}</i>\n\n\n👀 زود باش:\n<a href=\"{{ $json.Link }}\">بریم ببینیم!</a>\n",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4620,
        0
      ],
      "id": "6bd81719-6b6e-4783-b736-effa18f2f178",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "jsCode": "// مشخص کنید چند صفحه را می‌خواهید بررسی کنید\nconst numberOfPages = 3; \n\nconst pages = [];\nfor (let i = 1; i <= numberOfPages; i++) {\n  pages.push({ json: { page: i } });\n}\nreturn pages;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        440,
        0
      ],
      "id": "ac10cd8c-3d3e-4e25-8299-b47a8283dd0e",
      "name": "Create Page List"
    },
    {
      "parameters": {
        "batchSize": "={{ $json.page }}",
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        800,
        160
      ],
      "id": "98d63d36-28cd-42c9-b924-8de1beeb6107",
      "name": "Loop Over Items"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "name": "Replace Me",
      "typeVersion": 1,
      "position": [
        680,
        -380
      ],
      "id": "a086442e-c7d3-43a4-b7a7-1c924dd428c8"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "3f00cbb4-2c1f-4c28-93ce-2691f998a6ee",
              "name": "Title",
              "value": "={{ $json['تایتل'] }}",
              "type": "string"
            },
            {
              "id": "f002beb8-2644-4ec1-8062-a486d94ebecf",
              "name": "Rahn",
              "value": "={{ $json['ودیعه'] }}",
              "type": "string"
            },
            {
              "id": "1f435d2a-50ef-40b0-a946-ec5e030661ad",
              "name": "Ejareh",
              "value": "={{ $json['اجاره'] }}",
              "type": "string"
            },
            {
              "id": "83de52f7-3b4d-421d-a0a1-3a8f46c35f42",
              "name": "Link",
              "value": "={{ $json['لینک'] }}",
              "type": "string"
            },
            {
              "id": "4b1d4051-aeaa-41c9-9b41-7c4052213ce6",
              "name": "Published_at",
              "value": "={{ $json['تاریخ تهران'] }}",
              "type": "string"
            },
            {
              "id": "ebbd8153-082e-4b14-af75-3ed8a80f7b7c",
              "name": "Note",
              "value": "={{ $json['منتشر شده در'] }}",
              "type": "string"
            },
            {
              "id": "f0fd02f9-6a2e-4e44-8aaa-ba5205ede433",
              "name": "",
              "value": "",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3860,
        320
      ],
      "id": "75f17f19-61c6-471d-b0ed-59bbec32bf13",
      "name": "Edit Fields2"
    },
    {
      "parameters": {
        "url": "=https://divar.ir/s/tehran/rent-residential/shirazi?bbox=51.2901192%2C35.6988182%2C51.4176216%2C35.7938156&credit=-1500000000&districts=138%2C139%2C167%2C202%2C297%2C315%2C81%2C87%2C88%2C90%2C933&map_bbox=51.29011917114258%2C35.69881820678711%2C51.41762161254883%2C35.79381561279297&map_place_hash=1%7C1035%2C138%2C139%2C167%2C202%2C297%2C315%2C81%2C87%2C88%2C90%2C933%7Cresidential-rent&rent=-20000000&rooms=%D8%AF%D9%88&page={{ $json.page }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": " User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "text"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1160,
        0
      ],
      "id": "3caeb4ae-9d6a-4237-b8a9-1acdf5440e8c",
      "name": "HTTP Request",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "jsCode": "const months = [\n  '', 'فروردین', 'اردیبهشت', 'خرداد', 'تیر', 'مرداد', 'شهریور',\n  'مهر', 'آبان', 'آذر', 'دی', 'بهمن', 'اسفند'\n];\n\nfunction divarSortDateToTehranPretty(sort_date) {\n  if (!sort_date || sort_date === 'Not Found') return '';\n  const ms = Math.floor(Number(sort_date) / 1000);\n  const date = new Date(ms);\n  const fa = date.toLocaleString('fa-IR', { timeZone: 'Asia/Tehran' });\n  const [datePart, timePart] = fa.split('،');\n  if (!datePart || !timePart) return fa;\n  const [year, month, day] = datePart.split('/');\n  const monthName = months[parseInt(month, 10)];\n  const time = timePart.replace(/[^\\d:]/g, '').split(':');\n  const hourMinute = time[0] + ':' + time[1];\n  // Convert Persian digits to English\n  const toEn = s => s.replace(/[۰-۹]/g, d => '۰۱۲۳۴۵۶۷۸۹'.indexOf(d));\n  return `${toEn(String(Number(day)))} ${monthName} ، ${toEn(hourMinute)}`;\n}\n\nconst results = [];\nconst htmlPages = $json.data; // This is an array of {data: \"<html>...</html>\"}\n\nfor (const htmlObj of htmlPages) {\n  const html = htmlObj.data; // The HTML string\n\n  // Extract __PRELOADED_STATE__ JSON\n  const scriptTagRegex = /window\\.__PRELOADED_STATE__\\s*=\\s*(\\{[\\s\\S]*?\\})\\s*;/;\n  const match = html.match(scriptTagRegex);\n\n  if (!match || !match[1]) continue;\n\n  let preloadedState;\n  try {\n    preloadedState = JSON.parse(match[1]);\n  } catch (e) {\n    continue;\n  }\n\n  // Find posts_metadata\n  let postsMetadata = null;\n  if (preloadedState?.nb?.actionLog?.server_side_info?.info?.posts_metadata) {\n    postsMetadata = preloadedState.nb.actionLog.server_side_info.info.posts_metadata;\n  } else if (preloadedState?.posts_metadata) {\n    postsMetadata = preloadedState.posts_metadata;\n  } else if (preloadedState?.actionLog?.server_side_info?.info?.posts_metadata) {\n    postsMetadata = preloadedState.actionLog.server_side_info.info.posts_metadata;\n  } else {\n    function findPostsMeta(obj) {\n      if (Array.isArray(obj) && obj.length && obj[0].token && obj[0].sort_date) return obj;\n      if (typeof obj === 'object' && obj !== null) {\n        for (const key in obj) {\n          const found = findPostsMeta(obj[key]);\n          if (found) return found;\n        }\n      }\n      return null;\n    }\n    postsMetadata = findPostsMeta(preloadedState);\n  }\n  if (!Array.isArray(postsMetadata)) continue;\n\n  // Extract posts from HTML\n  const postRegex = /href=\"(\\/v\\/[^\"]+)\"[\\s\\S]*?<h2 class=\"unsafe-kt-post-card__title\">([^<]+)<\\/h2>[\\s\\S]*?<div class=\"unsafe-kt-post-card__description\">([^<]*)<\\/div>[\\s\\S]*?<div class=\"unsafe-kt-post-card__description\">([^<]*)<\\/div>[\\s\\S]*?<span class=\"unsafe-kt-post-card__bottom-description[^\"]*\" title=\"([^\"]*)\"/g;\n\n  let matchPost;\n  while ((matchPost = postRegex.exec(html)) !== null) {\n    const link = matchPost[1];\n    const title = matchPost[2].trim();\n    const price1 = matchPost[3].trim();\n    const price2 = matchPost[4].trim();\n    const published_at = matchPost[5].trim();\n\n    // Extract token from link\n    const urlParts = link.split('/');\n    let token = urlParts[urlParts.length - 1];\n    if (!token) token = urlParts[urlParts.length - 2];\n\n    // Find sort_date for this token\n    let modified_date = 'Not Found';\n    const meta = postsMetadata.find(m => \n      decodeURIComponent(m.token).toLowerCase() === decodeURIComponent(token).toLowerCase()\n    );\n    if (meta && meta.sort_date) {\n      modified_date = meta.sort_date;\n    }\n\n    results.push({\n      \"تایتل\": title,\n      \"ودیعه\": price1,\n      \"اجاره\": price2 || 'رهن کامل',\n      \"منتشر شده در\": published_at,\n      \"modified_date\": modified_date,\n      \"تاریخ تهران\": divarSortDateToTehranPretty(modified_date),\n      \"لینک\": `https://divar.ir${link}`\n    });\n  }\n}\n\nreturn results.map(r => ({json: r}));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1800,
        320
      ],
      "id": "35d277f7-0f02-4fca-adc6-7c7d8d0fc482",
      "name": "Code1",
      "retryOnFail": true,
      "maxTries": 5,
      "executeOnce": false,
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "e0e85958-fd05-4fe8-b984-eb6f92261249",
              "leftValue": "={{ parseInt($json.modified_date.substring(0, 13)) }}",
              "rightValue": "={{ Date.now() - 3600000 * 70}}",
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        3200,
        380
      ],
      "id": "e53c9cbb-ce2f-4dee-897e-072cf565f2b6",
      "name": "If"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        1380,
        0
      ],
      "id": "7d2cc091-f887-451c-81ab-dbdf7238421a",
      "name": "Aggregate"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutesInterval": 60
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        220,
        0
      ],
      "id": "877f803c-91b0-4295-a24a-611a0e4c7e2a",
      "name": "Schedule Trigger"
    }
  ],
  "pinData": {},
  "connections": {
    "Send a text message": {
      "main": [
        []
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Send a text message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Page List": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Replace Me",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Replace Me": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields2": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Edit Fields2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Create Page List",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "39fc4ce2-79b4-4465-8b13-29ba12c75d4d",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "45af92add67448c6984c95b1777171a3edae4fd7a2d5d481a51de495eeadaac7"
  },
  "id": "69E5OBAVyNtw4C6H",
  "tags": []
}